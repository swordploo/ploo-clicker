using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Diagnostics;
using System.Runtime.InteropServices;

namespace plooClicker
{
    internal static class MouseHook
    {
        // secret handshake
        public static readonly IntPtr ScopedSignature = new IntPtr(1234567);

        // function called by win when mouse event occurs
        private static LowLevelMouseProc _proc = HookCallback;
        private static IntPtr _hookID = IntPtr.Zero;

        // imported functions from win user32.dll lib
        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr SetWindowsHookEx(int idHook, LowLevelMouseProc lpfn, IntPtr hMod, uint dwThreadId);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool UnhookWindowsHookEx(IntPtr hhk);

        [DllImport("user32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr CallNextHookEx(IntPtr hhk, int nCode, IntPtr wParam, IntPtr lParam);

        [DllImport("kernel32.dll", CharSet = CharSet.Auto, SetLastError = true)]
        private static extern IntPtr GetModuleHandle(string lpModuleName);

        // this struct mirros teh data win provides in hook
        [StructLayout(LayoutKind.Sequential)]
        private struct MSLLHOOKSTRUCT
        {
            public int pt_x;
            public int pt_y;
            public uint mouseData;
            public uint flags;
            public uint time;
            public IntPtr dwExtraInfo;
        }

        // delegate signature for callback func
        private delegate IntPtr LowLevelMouseProc(int nCode, IntPtr wParam, IntPtr lParam);

        // const values from win api
        private const int WH_MOUSE_LL = 14; // hook type
        private const int WM_LBUTTONDOWN = 0x0201; // msg for left mb up
        private const int WM_LBUTTONUP = 0x0202; // msg for left mb down
        private const int WM_RBUTTONDOWN = 0x0204; // msg for right mb down
        private const int WM_RBUTTONUP = 0x0205; // msg for right mb up

        public static event Action OnLeftMouseDown;
        public static event Action OnLeftMouseUp;
        public static event Action OnRightMouseDown;
        public static event Action OnRightMouseUp;

        // public method to listen for mouse events
        public static void Start()
        {
            _hookID = SetHook(_proc);
        }

        // pub method to stop lsitening
        public static void Stop()
        {
            UnhookWindowsHookEx(_hookID);
        }

        private static IntPtr SetHook(LowLevelMouseProc proc)
        {
            using (Process curProcess = Process.GetCurrentProcess())
            using (ProcessModule curModule = curProcess.MainModule)
            {
                // this func call sets the hook with the OS
                return SetWindowsHookEx(WH_MOUSE_LL, proc, GetModuleHandle(curModule.ModuleName), 0);
            }
        }

        // this func gets called every time mouse event occurs
        private static IntPtr HookCallback(int nCode, IntPtr wParam, IntPtr lParam)
        {
            if (nCode >= 0)
            {
                // get struct with extra info on mouse event
                MSLLHOOKSTRUCT hookStruct = (MSLLHOOKSTRUCT)Marshal.PtrToStructure(lParam, typeof(MSLLHOOKSTRUCT));

                // secret handshake check
                if (hookStruct.dwExtraInfo == ScopedSignature)
                {
                    // click generated by program
                    // pass onto next hook in chain n do nothing
                    return CallNextHookEx(_hookID, nCode, wParam, lParam);
                }

                // check what kinda mouse event happened
                switch ((int)wParam)
                {
                    case WM_LBUTTONDOWN:
                        OnLeftMouseDown?.Invoke();
                        break;
                    case WM_LBUTTONUP:
                        OnLeftMouseUp?.Invoke();
                        break;
                    case WM_RBUTTONDOWN:
                        OnRightMouseDown?.Invoke();
                        break;
                    case WM_RBUTTONUP:
                        OnRightMouseUp?.Invoke();
                        break;
                }
            }

            // pass event to next hook in chain
            return CallNextHookEx(_hookID, nCode, wParam, lParam);
        }
    }
}
